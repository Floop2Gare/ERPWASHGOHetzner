-- üîí Politiques RLS de Production - ERP Wash&Go
-- Date : 22 janvier 2025
-- Status : CRITIQUE - √Ä ex√©cuter apr√®s configuration SERVICE_ROLE_KEY

-- ‚ö†Ô∏è IMPORTANT : 
-- - Le backend utilise SERVICE_ROLE_KEY (bypass RLS)
-- - Ces politiques prot√®gent contre l'acc√®s direct √† l'API Supabase
-- - Ne JAMAIS exposer SERVICE_ROLE_KEY au frontend

-- ==============================================
-- 1. SUPPRIMER LES POLITIQUES PERMISSIVES
-- ==============================================

-- Supprimer toutes les politiques "Allow all operations"
DROP POLICY IF EXISTS "Allow all operations" ON companies;
DROP POLICY IF EXISTS "Allow all operations" ON clients;
DROP POLICY IF EXISTS "Allow all operations" ON client_contacts;
DROP POLICY IF EXISTS "Allow all operations" ON services;
DROP POLICY IF EXISTS "Allow all operations" ON service_options;
DROP POLICY IF EXISTS "Allow all operations" ON engagements;
DROP POLICY IF EXISTS "Allow all operations" ON leads;
DROP POLICY IF EXISTS "Allow all operations" ON auth_users;
DROP POLICY IF EXISTS "Allow all operations" ON documents;

-- ==============================================
-- 2. POLITIQUES RESTRICTIVES POUR LECTURE
-- ==============================================

-- COMPANIES - Lecture autoris√©e pour utilisateurs authentifi√©s
CREATE POLICY "Authenticated users can read companies" ON companies
FOR SELECT
USING (auth.role() = 'authenticated');

-- CLIENTS - Lecture autoris√©e pour utilisateurs authentifi√©s
CREATE POLICY "Authenticated users can read clients" ON clients
FOR SELECT
USING (auth.role() = 'authenticated');

-- CLIENT_CONTACTS - Lecture autoris√©e pour utilisateurs authentifi√©s
CREATE POLICY "Authenticated users can read client_contacts" ON client_contacts
FOR SELECT
USING (auth.role() = 'authenticated');

-- SERVICES - Lecture autoris√©e pour utilisateurs authentifi√©s
CREATE POLICY "Authenticated users can read services" ON services
FOR SELECT
USING (auth.role() = 'authenticated');

-- SERVICE_OPTIONS - Lecture autoris√©e pour utilisateurs authentifi√©s
CREATE POLICY "Authenticated users can read service_options" ON service_options
FOR SELECT
USING (auth.role() = 'authenticated');

-- ENGAGEMENTS - Lecture autoris√©e pour utilisateurs authentifi√©s
CREATE POLICY "Authenticated users can read engagements" ON engagements
FOR SELECT
USING (auth.role() = 'authenticated');

-- LEADS - Lecture autoris√©e pour utilisateurs authentifi√©s
CREATE POLICY "Authenticated users can read leads" ON leads
FOR SELECT
USING (auth.role() = 'authenticated');

-- AUTH_USERS - Lecture autoris√©e pour utilisateurs authentifi√©s
CREATE POLICY "Authenticated users can read auth_users" ON auth_users
FOR SELECT
USING (auth.role() = 'authenticated');

-- DOCUMENTS - Lecture autoris√©e pour utilisateurs authentifi√©s
CREATE POLICY "Authenticated users can read documents" ON documents
FOR SELECT
USING (auth.role() = 'authenticated');

-- ==============================================
-- 3. POLITIQUES RESTRICTIVES POUR √âCRITURE
-- ==============================================

-- COMPANIES - √âcriture interdite via API publique
CREATE POLICY "No public write access to companies" ON companies
FOR ALL
USING (false);

-- CLIENTS - √âcriture interdite via API publique
CREATE POLICY "No public write access to clients" ON clients
FOR ALL
USING (false);

-- CLIENT_CONTACTS - √âcriture interdite via API publique
CREATE POLICY "No public write access to client_contacts" ON client_contacts
FOR ALL
USING (false);

-- SERVICES - √âcriture interdite via API publique
CREATE POLICY "No public write access to services" ON services
FOR ALL
USING (false);

-- SERVICE_OPTIONS - √âcriture interdite via API publique
CREATE POLICY "No public write access to service_options" ON service_options
FOR ALL
USING (false);

-- ENGAGEMENTS - √âcriture interdite via API publique
CREATE POLICY "No public write access to engagements" ON engagements
FOR ALL
USING (false);

-- LEADS - √âcriture interdite via API publique
CREATE POLICY "No public write access to leads" ON leads
FOR ALL
USING (false);

-- AUTH_USERS - √âcriture interdite via API publique
CREATE POLICY "No public write access to auth_users" ON auth_users
FOR ALL
USING (false);

-- DOCUMENTS - √âcriture interdite via API publique
CREATE POLICY "No public write access to documents" ON documents
FOR ALL
USING (false);

-- ==============================================
-- 4. V√âRIFICATION DES POLITIQUES
-- ==============================================

-- V√©rifier que RLS est activ√© sur toutes les tables
SELECT schemaname, tablename, rowsecurity 
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN ('companies', 'clients', 'client_contacts', 'services', 'service_options', 'engagements', 'leads', 'auth_users', 'documents');

-- Lister toutes les politiques actives
SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual 
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- ==============================================
-- 5. NOTES IMPORTANTES
-- ==============================================

/*
S√âCURIT√â RENFORC√âE :

1. ‚úÖ Lecture autoris√©e pour utilisateurs authentifi√©s uniquement
2. ‚ùå √âcriture interdite via API publique (ANON_KEY)
3. ‚úÖ Backend utilise SERVICE_ROLE_KEY (bypass RLS)
4. ‚úÖ Protection contre acc√®s direct frontend ‚Üí Supabase

ARCHITECTURE S√âCURIS√âE :

Frontend (ANON_KEY) ‚Üí Lecture seule via API Supabase
Backend (SERVICE_ROLE_KEY) ‚Üí Lecture/√âcriture via API Supabase
Frontend ‚Üí Backend ‚Üí Supabase (recommand√©)

TESTS DE S√âCURIT√â :

1. Tester lecture avec ANON_KEY (doit fonctionner)
2. Tester √©criture avec ANON_KEY (doit √©chouer)
3. Tester √©criture avec SERVICE_ROLE_KEY (doit fonctionner)
4. V√©rifier que le backend fonctionne normalement

MONITORING :

- Surveiller les tentatives d'√©criture avec ANON_KEY
- Alerter en cas d'acc√®s suspect
- Logger toutes les op√©rations sensibles
*/

